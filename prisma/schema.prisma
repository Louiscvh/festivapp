generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  birth        String   
  email        String   @unique
  password     String
  role         Role     @default(USER)
  avatar       String?
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @default(now())
  follower     Follow[] @relation("following")
  following    Follow[] @relation("follower")
  post         Post[] @relation("post")
  like         Like[] @relation("userLike")
  comment      Comment[] @relation("userComment")
}

model Post {
  id           Int      @id @default(autoincrement())
  description  String?
  content      String
  location     String?
  author       User @relation("post", fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @default(now())
  festival     Festival @relation(fields: [festivalId], references: [id])
  festivalId   Int
  like         Like[] @relation("postLike")
  comment      Comment[] @relation("postComment")
}

model Festival {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  adresse      String?
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @default(now())
  genre        Genre  @default(OTHER)
  post         Post[]
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int
}

model Like {
  id          Int  @id @default(autoincrement())
  author      User @relation("userLike", fields: [authorId], references: [id])
  authorId    Int
  post        Post @relation("postLike", fields: [postId], references: [id])
  postId      Int
}

model Comment {
  id          Int  @id @default(autoincrement())
  author      User @relation("userComment", fields: [authorId], references: [id])
  authorId    Int
  post        Post @relation("postComment", fields: [postId], references: [id])
  postId      Int
  content     String
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Genre {
  ROCK
  POP
  JAZZ
  CLASSIC
  METHAL
  OTHER
}